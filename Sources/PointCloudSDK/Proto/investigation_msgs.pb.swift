// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: investigation_msgs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Ars_V1_InvestControlType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case mappingStart // = 0
  case mappingStop // = 1
  case mappingReset // = 2
  case densityLow // = 4
  case densityMiddle // = 5
  case densityHigh // = 6
  case fileDelete // = 7
  case recodeStart // = 8
  case recodeStop // = 9
  case recodeMarkPoint // = 10
  case UNRECOGNIZED(Int)

  init() {
    self = .mappingStart
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .mappingStart
    case 1: self = .mappingStop
    case 2: self = .mappingReset
    case 4: self = .densityLow
    case 5: self = .densityMiddle
    case 6: self = .densityHigh
    case 7: self = .fileDelete
    case 8: self = .recodeStart
    case 9: self = .recodeStop
    case 10: self = .recodeMarkPoint
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .mappingStart: return 0
    case .mappingStop: return 1
    case .mappingReset: return 2
    case .densityLow: return 4
    case .densityMiddle: return 5
    case .densityHigh: return 6
    case .fileDelete: return 7
    case .recodeStart: return 8
    case .recodeStop: return 9
    case .recodeMarkPoint: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Ars_V1_InvestControlType] = [
    .mappingStart,
    .mappingStop,
    .mappingReset,
    .densityLow,
    .densityMiddle,
    .densityHigh,
    .fileDelete,
    .recodeStart,
    .recodeStop,
    .recodeMarkPoint,
  ]

}

enum Ars_V1_StatusValue: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case noRecording // = 0
  case recoding // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .noRecording
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noRecording
    case 1: self = .recoding
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .noRecording: return 0
    case .recoding: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Ars_V1_StatusValue] = [
    .noRecording,
    .recoding,
  ]

}

enum Ars_V1_RecordControlStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case recordStatusReserve // = 0
  case recordFailed // = 1
  case recordSuccess // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .recordStatusReserve
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .recordStatusReserve
    case 1: self = .recordFailed
    case 2: self = .recordSuccess
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .recordStatusReserve: return 0
    case .recordFailed: return 1
    case .recordSuccess: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Ars_V1_RecordControlStatus] = [
    .recordStatusReserve,
    .recordFailed,
    .recordSuccess,
  ]

}

struct Ars_V1_RecordStatus: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Ars_V1_StatusValue = .noRecording

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ars_V1_InvestControl: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Ars_V1_Header {
    get {return _header ?? Ars_V1_Header()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var cmd: Ars_V1_InvestControlType = .mappingStart

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Ars_V1_Header? = nil
}

struct Ars_V1_RecordControlRes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Ars_V1_RecordControlStatus = .recordStatusReserve

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ars_V1_SetMotorVelParam: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Ars_V1_Header {
    get {return _header ?? Ars_V1_Header()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var value: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Ars_V1_Header? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ars.v1"

extension Ars_V1_InvestControlType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAPPING_START"),
    1: .same(proto: "MAPPING_STOP"),
    2: .same(proto: "MAPPING_RESET"),
    4: .same(proto: "DENSITY_LOW"),
    5: .same(proto: "DENSITY_MIDDLE"),
    6: .same(proto: "DENSITY_HIGH"),
    7: .same(proto: "FILE_DELETE"),
    8: .same(proto: "RECODE_START"),
    9: .same(proto: "RECODE_STOP"),
    10: .same(proto: "RECODE_MARK_POINT"),
  ]
}

extension Ars_V1_StatusValue: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_RECORDING"),
    1: .same(proto: "RECODING"),
  ]
}

extension Ars_V1_RecordControlStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RECORD_STATUS_RESERVE"),
    1: .same(proto: "RECORD_FAILED"),
    2: .same(proto: "RECORD_SUCCESS"),
  ]
}

extension Ars_V1_RecordStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .noRecording {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_RecordStatus, rhs: Ars_V1_RecordStatus) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_InvestControl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InvestControl"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "cmd"),
    3: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.cmd) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.cmd != .mappingStart {
      try visitor.visitSingularEnumField(value: self.cmd, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_InvestControl, rhs: Ars_V1_InvestControl) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.cmd != rhs.cmd {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_RecordControlRes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordControlRes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .recordStatusReserve {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_RecordControlRes, rhs: Ars_V1_RecordControlRes) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_SetMotorVelParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetMotorVelParam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_SetMotorVelParam, rhs: Ars_V1_SetMotorVelParam) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
