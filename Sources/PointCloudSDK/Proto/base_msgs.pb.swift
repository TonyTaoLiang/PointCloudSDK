// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: base_msgs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Ars_V1_MessageType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case ack // = 0
  case notify // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .ack
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ack
    case 1: self = .notify
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .ack: return 0
    case .notify: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Ars_V1_MessageType] = [
    .ack,
    .notify,
  ]

}

enum Ars_V1_NavigationStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case idle // = 0
  case mapping // = 1
  case location // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .idle
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .idle
    case 1: self = .mapping
    case 2: self = .location
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .idle: return 0
    case .mapping: return 1
    case .location: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Ars_V1_NavigationStatus] = [
    .idle,
    .mapping,
    .location,
  ]

}

enum Ars_V1_DiskExistStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case inexistence // = 0
  case exist // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .inexistence
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .inexistence
    case 1: self = .exist
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .inexistence: return 0
    case .exist: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Ars_V1_DiskExistStatus] = [
    .inexistence,
    .exist,
  ]

}

struct Ars_V1_BasicString: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ars_V1_Vec3: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Double = 0

  var y: Double = 0

  var z: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ars_V1_Quaternion: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Double = 0

  var y: Double = 0

  var z: Double = 0

  var w: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ars_V1_Pose: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var position: Ars_V1_Vec3 {
    get {return _position ?? Ars_V1_Vec3()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var orientation: Ars_V1_Quaternion {
    get {return _orientation ?? Ars_V1_Quaternion()}
    set {_orientation = newValue}
  }
  /// Returns true if `orientation` has been explicitly set.
  var hasOrientation: Bool {return self._orientation != nil}
  /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
  mutating func clearOrientation() {self._orientation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _position: Ars_V1_Vec3? = nil
  fileprivate var _orientation: Ars_V1_Quaternion? = nil
}

struct Ars_V1_Twist: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var linear: Double = 0

  var angular: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ars_V1_Header: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seq: Double = 0

  var timestamp: Int64 = 0

  var type: Ars_V1_MessageType = .ack

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ars_V1_PointCloud: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Ars_V1_Header {
    get {return _header ?? Ars_V1_Header()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Ars_V1_Header? = nil
}

struct Ars_V1_ImuData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accX: Float = 0

  var accY: Float = 0

  var accZ: Float = 0

  var gyroX: Float = 0

  var gyroY: Float = 0

  var gyroZ: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ars_V1_BaseStatus: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cpuUsage: Float = 0

  var memoryUsage: Float = 0

  var diskExist: Ars_V1_DiskExistStatus = .inexistence

  var diskUsage: Float = 0

  var currentPose: Ars_V1_Pose {
    get {return _currentPose ?? Ars_V1_Pose()}
    set {_currentPose = newValue}
  }
  /// Returns true if `currentPose` has been explicitly set.
  var hasCurrentPose: Bool {return self._currentPose != nil}
  /// Clears the value of `currentPose`. Subsequent reads from it will return its default value.
  mutating func clearCurrentPose() {self._currentPose = nil}

  var currentTwist: Ars_V1_Twist {
    get {return _currentTwist ?? Ars_V1_Twist()}
    set {_currentTwist = newValue}
  }
  /// Returns true if `currentTwist` has been explicitly set.
  var hasCurrentTwist: Bool {return self._currentTwist != nil}
  /// Clears the value of `currentTwist`. Subsequent reads from it will return its default value.
  mutating func clearCurrentTwist() {self._currentTwist = nil}

  var navigationStatus: Ars_V1_NavigationStatus = .idle

  var motorVel: Int32 = 0

  var camIsConnect: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _currentPose: Ars_V1_Pose? = nil
  fileprivate var _currentTwist: Ars_V1_Twist? = nil
}

struct Ars_V1_PointField: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var offset: UInt32 = 0

  var datatype: UInt32 = 0

  var count: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ars_V1_PointCloudLite: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seq: UInt32 = 0

  var stamp: UInt64 = 0

  var frameID: String = String()

  var width: UInt32 = 0

  var height: UInt32 = 0

  var isDense: Bool = false

  var isBigendian: Bool = false

  var pointStep: UInt32 = 0

  var rowStep: UInt32 = 0

  var fields: [Ars_V1_PointField] = []

  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ars_V1_OdometryLite: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seq: UInt32 {
    get {return _storage._seq}
    set {_uniqueStorage()._seq = newValue}
  }

  var stamp: UInt64 {
    get {return _storage._stamp}
    set {_uniqueStorage()._stamp = newValue}
  }

  var frameID: String {
    get {return _storage._frameID}
    set {_uniqueStorage()._frameID = newValue}
  }

  var childFrameID: String {
    get {return _storage._childFrameID}
    set {_uniqueStorage()._childFrameID = newValue}
  }

  var posX: Double {
    get {return _storage._posX}
    set {_uniqueStorage()._posX = newValue}
  }

  var posY: Double {
    get {return _storage._posY}
    set {_uniqueStorage()._posY = newValue}
  }

  var posZ: Double {
    get {return _storage._posZ}
    set {_uniqueStorage()._posZ = newValue}
  }

  var oriX: Double {
    get {return _storage._oriX}
    set {_uniqueStorage()._oriX = newValue}
  }

  var oriY: Double {
    get {return _storage._oriY}
    set {_uniqueStorage()._oriY = newValue}
  }

  var oriZ: Double {
    get {return _storage._oriZ}
    set {_uniqueStorage()._oriZ = newValue}
  }

  var oriW: Double {
    get {return _storage._oriW}
    set {_uniqueStorage()._oriW = newValue}
  }

  var linearX: Double {
    get {return _storage._linearX}
    set {_uniqueStorage()._linearX = newValue}
  }

  var linearY: Double {
    get {return _storage._linearY}
    set {_uniqueStorage()._linearY = newValue}
  }

  var linearZ: Double {
    get {return _storage._linearZ}
    set {_uniqueStorage()._linearZ = newValue}
  }

  var angularX: Double {
    get {return _storage._angularX}
    set {_uniqueStorage()._angularX = newValue}
  }

  var angularY: Double {
    get {return _storage._angularY}
    set {_uniqueStorage()._angularY = newValue}
  }

  var angularZ: Double {
    get {return _storage._angularZ}
    set {_uniqueStorage()._angularZ = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ars_V1_SetControlParam: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Ars_V1_Header {
    get {return _header ?? Ars_V1_Header()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var code: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Ars_V1_Header? = nil
}

struct Ars_V1_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Ars_V1_Header {
    get {return _header ?? Ars_V1_Header()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var code: Int32 = 0

  var reason: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Ars_V1_Header? = nil
}

struct Ars_V1_Status: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var controlstatus: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ars_V1_ShootResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isHdr: Bool = false

  var status: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ars.v1"

extension Ars_V1_MessageType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACK"),
    1: .same(proto: "NOTIFY"),
  ]
}

extension Ars_V1_NavigationStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IDLE"),
    1: .same(proto: "MAPPING"),
    2: .same(proto: "LOCATION"),
  ]
}

extension Ars_V1_DiskExistStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INEXISTENCE"),
    1: .same(proto: "EXIST"),
  ]
}

extension Ars_V1_BasicString: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BasicString"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_BasicString, rhs: Ars_V1_BasicString) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_Vec3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Vec3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.x) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.y) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.z) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.x, fieldNumber: 1)
    }
    if self.y.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.y, fieldNumber: 2)
    }
    if self.z.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.z, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_Vec3, rhs: Ars_V1_Vec3) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_Quaternion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Quaternion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
    4: .same(proto: "w"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.x) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.y) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.z) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.w) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.x, fieldNumber: 1)
    }
    if self.y.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.y, fieldNumber: 2)
    }
    if self.z.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.z, fieldNumber: 3)
    }
    if self.w.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.w, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_Quaternion, rhs: Ars_V1_Quaternion) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.z != rhs.z {return false}
    if lhs.w != rhs.w {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_Pose: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Pose"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "orientation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._orientation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._orientation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_Pose, rhs: Ars_V1_Pose) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._orientation != rhs._orientation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_Twist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Twist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "linear"),
    2: .same(proto: "angular"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.linear) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.angular) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.linear.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.linear, fieldNumber: 1)
    }
    if self.angular.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.angular, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_Twist, rhs: Ars_V1_Twist) -> Bool {
    if lhs.linear != rhs.linear {return false}
    if lhs.angular != rhs.angular {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_Header: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Header"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.seq) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seq.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.seq, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    if self.type != .ack {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_Header, rhs: Ars_V1_Header) -> Bool {
    if lhs.seq != rhs.seq {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_PointCloud: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PointCloud"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_PointCloud, rhs: Ars_V1_PointCloud) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_ImuData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImuData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "acc_x"),
    2: .standard(proto: "acc_y"),
    3: .standard(proto: "acc_z"),
    4: .standard(proto: "gyro_x"),
    5: .standard(proto: "gyro_y"),
    6: .standard(proto: "gyro_z"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.accX) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.accY) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.accZ) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.gyroX) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.gyroY) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.gyroZ) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.accX.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.accX, fieldNumber: 1)
    }
    if self.accY.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.accY, fieldNumber: 2)
    }
    if self.accZ.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.accZ, fieldNumber: 3)
    }
    if self.gyroX.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.gyroX, fieldNumber: 4)
    }
    if self.gyroY.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.gyroY, fieldNumber: 5)
    }
    if self.gyroZ.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.gyroZ, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_ImuData, rhs: Ars_V1_ImuData) -> Bool {
    if lhs.accX != rhs.accX {return false}
    if lhs.accY != rhs.accY {return false}
    if lhs.accZ != rhs.accZ {return false}
    if lhs.gyroX != rhs.gyroX {return false}
    if lhs.gyroY != rhs.gyroY {return false}
    if lhs.gyroZ != rhs.gyroZ {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_BaseStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cpu_usage"),
    2: .standard(proto: "memory_usage"),
    3: .standard(proto: "disk_exist"),
    4: .standard(proto: "disk_usage"),
    5: .standard(proto: "current_pose"),
    6: .standard(proto: "current_twist"),
    7: .standard(proto: "navigation_status"),
    8: .standard(proto: "motor_vel"),
    9: .standard(proto: "cam_is_connect"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.cpuUsage) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.memoryUsage) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.diskExist) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.diskUsage) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._currentPose) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._currentTwist) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.navigationStatus) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.motorVel) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.camIsConnect) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.cpuUsage.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.cpuUsage, fieldNumber: 1)
    }
    if self.memoryUsage.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.memoryUsage, fieldNumber: 2)
    }
    if self.diskExist != .inexistence {
      try visitor.visitSingularEnumField(value: self.diskExist, fieldNumber: 3)
    }
    if self.diskUsage.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.diskUsage, fieldNumber: 4)
    }
    try { if let v = self._currentPose {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._currentTwist {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if self.navigationStatus != .idle {
      try visitor.visitSingularEnumField(value: self.navigationStatus, fieldNumber: 7)
    }
    if self.motorVel != 0 {
      try visitor.visitSingularInt32Field(value: self.motorVel, fieldNumber: 8)
    }
    if self.camIsConnect != false {
      try visitor.visitSingularBoolField(value: self.camIsConnect, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_BaseStatus, rhs: Ars_V1_BaseStatus) -> Bool {
    if lhs.cpuUsage != rhs.cpuUsage {return false}
    if lhs.memoryUsage != rhs.memoryUsage {return false}
    if lhs.diskExist != rhs.diskExist {return false}
    if lhs.diskUsage != rhs.diskUsage {return false}
    if lhs._currentPose != rhs._currentPose {return false}
    if lhs._currentTwist != rhs._currentTwist {return false}
    if lhs.navigationStatus != rhs.navigationStatus {return false}
    if lhs.motorVel != rhs.motorVel {return false}
    if lhs.camIsConnect != rhs.camIsConnect {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_PointField: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PointField"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "offset"),
    3: .same(proto: "datatype"),
    4: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.offset) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.datatype) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.count) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.offset != 0 {
      try visitor.visitSingularUInt32Field(value: self.offset, fieldNumber: 2)
    }
    if self.datatype != 0 {
      try visitor.visitSingularUInt32Field(value: self.datatype, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_PointField, rhs: Ars_V1_PointField) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.datatype != rhs.datatype {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_PointCloudLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PointCloudLite"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    2: .same(proto: "stamp"),
    3: .standard(proto: "frame_id"),
    4: .same(proto: "width"),
    5: .same(proto: "height"),
    6: .standard(proto: "is_dense"),
    7: .standard(proto: "is_bigendian"),
    8: .standard(proto: "point_step"),
    9: .standard(proto: "row_step"),
    10: .same(proto: "fields"),
    11: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.seq) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.stamp) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.frameID) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.width) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.height) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isDense) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isBigendian) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.pointStep) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.rowStep) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.fields) }()
      case 11: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seq != 0 {
      try visitor.visitSingularUInt32Field(value: self.seq, fieldNumber: 1)
    }
    if self.stamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.stamp, fieldNumber: 2)
    }
    if !self.frameID.isEmpty {
      try visitor.visitSingularStringField(value: self.frameID, fieldNumber: 3)
    }
    if self.width != 0 {
      try visitor.visitSingularUInt32Field(value: self.width, fieldNumber: 4)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt32Field(value: self.height, fieldNumber: 5)
    }
    if self.isDense != false {
      try visitor.visitSingularBoolField(value: self.isDense, fieldNumber: 6)
    }
    if self.isBigendian != false {
      try visitor.visitSingularBoolField(value: self.isBigendian, fieldNumber: 7)
    }
    if self.pointStep != 0 {
      try visitor.visitSingularUInt32Field(value: self.pointStep, fieldNumber: 8)
    }
    if self.rowStep != 0 {
      try visitor.visitSingularUInt32Field(value: self.rowStep, fieldNumber: 9)
    }
    if !self.fields.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fields, fieldNumber: 10)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_PointCloudLite, rhs: Ars_V1_PointCloudLite) -> Bool {
    if lhs.seq != rhs.seq {return false}
    if lhs.stamp != rhs.stamp {return false}
    if lhs.frameID != rhs.frameID {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.isDense != rhs.isDense {return false}
    if lhs.isBigendian != rhs.isBigendian {return false}
    if lhs.pointStep != rhs.pointStep {return false}
    if lhs.rowStep != rhs.rowStep {return false}
    if lhs.fields != rhs.fields {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_OdometryLite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OdometryLite"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    2: .same(proto: "stamp"),
    3: .standard(proto: "frame_id"),
    4: .standard(proto: "child_frame_id"),
    5: .standard(proto: "pos_x"),
    6: .standard(proto: "pos_y"),
    7: .standard(proto: "pos_z"),
    8: .standard(proto: "ori_x"),
    9: .standard(proto: "ori_y"),
    10: .standard(proto: "ori_z"),
    11: .standard(proto: "ori_w"),
    12: .standard(proto: "linear_x"),
    13: .standard(proto: "linear_y"),
    14: .standard(proto: "linear_z"),
    15: .standard(proto: "angular_x"),
    16: .standard(proto: "angular_y"),
    17: .standard(proto: "angular_z"),
  ]

  fileprivate class _StorageClass {
    var _seq: UInt32 = 0
    var _stamp: UInt64 = 0
    var _frameID: String = String()
    var _childFrameID: String = String()
    var _posX: Double = 0
    var _posY: Double = 0
    var _posZ: Double = 0
    var _oriX: Double = 0
    var _oriY: Double = 0
    var _oriZ: Double = 0
    var _oriW: Double = 0
    var _linearX: Double = 0
    var _linearY: Double = 0
    var _linearZ: Double = 0
    var _angularX: Double = 0
    var _angularY: Double = 0
    var _angularZ: Double = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _seq = source._seq
      _stamp = source._stamp
      _frameID = source._frameID
      _childFrameID = source._childFrameID
      _posX = source._posX
      _posY = source._posY
      _posZ = source._posZ
      _oriX = source._oriX
      _oriY = source._oriY
      _oriZ = source._oriZ
      _oriW = source._oriW
      _linearX = source._linearX
      _linearY = source._linearY
      _linearZ = source._linearZ
      _angularX = source._angularX
      _angularY = source._angularY
      _angularZ = source._angularZ
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._seq) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._stamp) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._frameID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._childFrameID) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._posX) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._posY) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._posZ) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._oriX) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._oriY) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._oriZ) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._oriW) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._linearX) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._linearY) }()
        case 14: try { try decoder.decodeSingularDoubleField(value: &_storage._linearZ) }()
        case 15: try { try decoder.decodeSingularDoubleField(value: &_storage._angularX) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._angularY) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._angularZ) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._seq != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._seq, fieldNumber: 1)
      }
      if _storage._stamp != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._stamp, fieldNumber: 2)
      }
      if !_storage._frameID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._frameID, fieldNumber: 3)
      }
      if !_storage._childFrameID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._childFrameID, fieldNumber: 4)
      }
      if _storage._posX.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._posX, fieldNumber: 5)
      }
      if _storage._posY.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._posY, fieldNumber: 6)
      }
      if _storage._posZ.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._posZ, fieldNumber: 7)
      }
      if _storage._oriX.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._oriX, fieldNumber: 8)
      }
      if _storage._oriY.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._oriY, fieldNumber: 9)
      }
      if _storage._oriZ.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._oriZ, fieldNumber: 10)
      }
      if _storage._oriW.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._oriW, fieldNumber: 11)
      }
      if _storage._linearX.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._linearX, fieldNumber: 12)
      }
      if _storage._linearY.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._linearY, fieldNumber: 13)
      }
      if _storage._linearZ.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._linearZ, fieldNumber: 14)
      }
      if _storage._angularX.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._angularX, fieldNumber: 15)
      }
      if _storage._angularY.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._angularY, fieldNumber: 16)
      }
      if _storage._angularZ.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._angularZ, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_OdometryLite, rhs: Ars_V1_OdometryLite) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._seq != rhs_storage._seq {return false}
        if _storage._stamp != rhs_storage._stamp {return false}
        if _storage._frameID != rhs_storage._frameID {return false}
        if _storage._childFrameID != rhs_storage._childFrameID {return false}
        if _storage._posX != rhs_storage._posX {return false}
        if _storage._posY != rhs_storage._posY {return false}
        if _storage._posZ != rhs_storage._posZ {return false}
        if _storage._oriX != rhs_storage._oriX {return false}
        if _storage._oriY != rhs_storage._oriY {return false}
        if _storage._oriZ != rhs_storage._oriZ {return false}
        if _storage._oriW != rhs_storage._oriW {return false}
        if _storage._linearX != rhs_storage._linearX {return false}
        if _storage._linearY != rhs_storage._linearY {return false}
        if _storage._linearZ != rhs_storage._linearZ {return false}
        if _storage._angularX != rhs_storage._angularX {return false}
        if _storage._angularY != rhs_storage._angularY {return false}
        if _storage._angularZ != rhs_storage._angularZ {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_SetControlParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetControlParam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_SetControlParam, rhs: Ars_V1_SetControlParam) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.code != rhs.code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "code"),
    3: .same(proto: "reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_Response, rhs: Ars_V1_Response) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.code != rhs.code {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_Status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Status"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "controlstatus"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.controlstatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.controlstatus != 0 {
      try visitor.visitSingularInt32Field(value: self.controlstatus, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_Status, rhs: Ars_V1_Status) -> Bool {
    if lhs.controlstatus != rhs.controlstatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ars_V1_ShootResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShootResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_hdr"),
    2: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isHdr) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isHdr != false {
      try visitor.visitSingularBoolField(value: self.isHdr, fieldNumber: 1)
    }
    if self.status != 0 {
      try visitor.visitSingularInt32Field(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ars_V1_ShootResponse, rhs: Ars_V1_ShootResponse) -> Bool {
    if lhs.isHdr != rhs.isHdr {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
